// Copyright (C) 2020 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this
// file except in compliance with the License. You may obtain a copy of the
// License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

syntax = "proto3";

import "yadcc/api/patch.proto";

package yadcc.daemon.local;

message GetVersionRequest {
  // NOTHING.
}

message GetVersionResponse {
  string built_at = 1;
  uint32 version_for_upgrade = 2;  // @sa: `daemon/common_flags.h`
}

message AskToLeaveRequest {
  // NOTHING.
}

message AskToLeaveResponse {
  // NOTHING.
}

message AcquireQuotaRequest {
  uint32 milliseconds_to_wait = 1;

  // Whether the client is expecting running this task would run quickly. The
  // daemon may decide to allow such tasks even if all processors are already
  // occupied (over-provisioning).
  //
  // This is necessary to prevent too many long-running tasks (e.g., local
  // retry) from blocking light tasks such as preprocessing. By giving
  // preprocessing a higher priority, we can submit tasks to the cloud more
  // quickly. (i.e., QoS of local tasks.)
  bool lightweight_task = 2;

  // The caller should provide its PID here. If it crashed unexpectedly, the
  // delegate daemon can automatically reclaim the quota allocated to this
  // requestor when this PID cease to exist.
  uint32 requestor_pid = 3;
}

message AcquireQuotaResponse {
  // Nothing. Check out HTTP status code for operation result.

  // 200: Quota granted.
  // 503: Timeout reached before a quota is available.
}

message ReleaseQuotaRequest {
  uint32 requestor_pid = 1;
}

message ReleaseQuotaResponse {
  // Nothing. Check out HTTP status code for operation result.
}

// This message uses several easy-to-get attributes to describe a file.
message FileDesc {
  string path = 1;
  uint64 size = 2;
  uint64 timestamp = 3;
}

// Report file digest to local daemon.
//
// In certain cases the daemon may need file digest of some file (e.g.,
// compiler's). Because daemon can be possibly run under different user of the
// client, the daemon may or may not have access to the compiler. Therefore, we
// ask the client to calculate the compiler's digest and report it to the
// daemon.
message SetFileDigestRequest {
  FileDesc file_desc = 1;
  string digest = 2;  // Usually is a BLAKE3 hash, hex encoded.
}

message SetFileDigestResponse {
  // NOTHING.
}

message SubmitCxxTaskRequest {
  int32 requestor_process_id = 1;
  string source_path = 2;
  string source_digest = 3;
  string compiler_invocation_arguments = 4;
  int32 cache_control = 5;
  FileDesc compiler = 6;
}

message SubmitCxxTaskResponse {
  uint64 task_id = 1;  // Encoded as string in JSON.
}

message WaitForCxxTaskRequest {
  uint64 task_id = 1;  // Encoded as string in JSON.
  uint32 milliseconds_to_wait = 2;
}

message WaitForCxxTaskResponse {
  int32 exit_code = 1;
  string output = 2;  // stdout
  string error = 3;   // stderr
  repeated string file_extensions = 4;
  repeated yadcc.patch.Locations patches = 5;
}

service HttpService {
  // GET /local/get_version
  //
  // This method returns version of the running daemon.
  rpc GetVersion(GetVersionRequest) returns (GetVersionResponse);

  // POST /local/ask_to_leave
  //
  // The daemon kills itself on reception of this message.
  rpc AskToLeave(AskToLeaveRequest) returns (AskToLeaveResponse);

  // POST /local/acquire_quota
  //
  // Acquire a quota for starting a new child.
  rpc AcquireQuota(AcquireQuotaRequest) returns (AcquireQuotaResponse);

  // POST /local/release_quota
  //
  // Release quota previously granted.
  rpc ReleaseQuota(ReleaseQuotaRequest) returns (ReleaseQuotaResponse);

  // POST /local/set_file_digest
  //
  // Tell the daemon about BLAKE3 digest of an on-disk file.
  rpc SetFileDigest(SetFileDigestRequest) returns (SetFileDigestResponse);

  // POST /local/submit_cxx_task
  //
  // Submit a C++ compilation task.
  rpc SubmitCxxTask(SubmitCxxTaskRequest) returns (SubmitCxxTaskResponse);

  // POST /local/wait_for_cxx_task
  //
  // Wait for a previously-submitted C++ task to complete.
  rpc WaitForCxxTask(WaitForCxxTaskRequest) returns (WaitForCxxTaskResponse);
}
